@page "/register"
@* @using RealWorldApp.Client.Shared *@
@layout FlatLayout
@inject HttpClient Http
@using RealWorldApp.Shared.Models
@inject NavigationManager _navigationManager


    <h3 class="card-title text-center mb-4">Registrar</h3>
    <EditForm Model="registerModel" OnValidSubmit="RegisterUser">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Username field with floating label -->
        <div class="form-floating mb-3">
            <InputText id="username" @bind-Value="registerModel.Username" class="form-control" placeholder="Username" />
            <label for="username">Username</label>
        </div>

        <!-- Email field with floating label -->
        <div class="form-floating mb-3">
            <InputText id="email" @bind-Value="registerModel.Email" class="form-control" placeholder="Email" />
            <label for="email">Email</label>
        </div>

        <!-- Password field with floating label -->
        <div class="form-floating mb-3">
            <InputText id="password" @bind-Value="registerModel.Password" type="password" class="form-control" placeholder="Password" />
            <label for="password">Password</label>
            <small id="passwordHelpBlock" class="form-text text-muted">
                Your password must be 8-20 characters long, contain letters and numbers, and must not contain spaces, special characters, or emoji.
            </small>
        </div>
        <div class="d-flex justify-content-end">
            <button type="submit" class="btn btn-success" >Register</button>
        </div>
    @* <button type="button" class="btn btn-success me-2" @onclick="NavigateToRegister">Register</button> *@
    <p class="mt-3">
        Already have an account?
        <NavLink href="/login">
            login
        </NavLink>
    </p>
    </EditForm>
    @if (successRegister != null)
    {
        <span class="alert alert-info">@successRegister</span>
    }
    else if (faildRegister != null)
    {
        <span class="alert alert-danger">@faildRegister</span>
    }


@code {
    private RegisterModel registerModel = new RegisterModel();
    private string? successRegister;
    private string? faildRegister;

    private async Task RegisterUser()
    {
        var response = await Http.PostAsJsonAsync("api/auth/register", registerModel);
        if (response.IsSuccessStatusCode)
        {
            successRegister = "Congratulations, you have registered successfully!";
            _navigationManager.NavigateTo("/login"); // Redirect to login page after successful registration
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            faildRegister = error; // Show the actual error from the server
        }
    }
}

