@page "/login"
@using RealWorldApp.Client.Shared
@layout FlatLayout
@using Microsoft.AspNetCore.Components.Authorization
@using RealWorldApp.Shared.Models
@using Blazored.SessionStorage
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService _sessionStorage
@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager _navigationManager

<div class="mx-auto">
    <h3 class="card-title text-center mb-4">Login</h3>
    @* <EditForm Model="login" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Username field with floating label -->
        <div class="form-floating mb-3">
            <InputText id="username" @bind-Value="login.Username" class="form-control" placeholder="Username" />
            <label for="username">Username</label>
        </div>

        <!-- Email field with floating label -->
        <div class="form-floating mb-3">
            <InputText id="email" @bind-Value="loginModel.Email" class="form-control" placeholder="Email" />
            <label for="email">Email</label>
        </div>

        <!-- Password field with floating label -->
        <div class="form-floating mb-3">
            <InputText id="password" @bind-Value="login.Password" type="password" class="form-control" placeholder="Password" />
            <label for="password">Password</label>
            <small id="passwordHelpBlock" class="form-text text-muted">
                Your password must be 8-20 characters long, contain letters and numbers, and must not contain spaces, special characters, or emoji.
            </small>
        </div>
        <div class="d-flex justify-content-end">
            <button type="submit" class="btn btn-primary">Login</button>
        </div>
        <p class="mt-3">
            Not registered?
            <NavLink href="/register">
                Create an
                account
            </NavLink>
        </p>
        @if (faildLogin != null)
        {
            <div class="alert alert-danger mt-3 position-fixed top-0 end-50" role="alert">
                @faildLogin
            </div>
        }
    </EditForm> *@
</div>

@code {
    private Login login = new Login();
    private string? faildLogin { get; set; }

    private async Task HandleLogin()
    {
        faildLogin = null;

        var response = await Http.PostAsJsonAsync("api/login", login);

        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();

            if (!string.IsNullOrEmpty(token) && token.Split('.').Length == 3)
            {
                await _sessionStorage.SetItemAsync("authToken", token);
                ((CustomAuthStateProvider)_authStateProvider).NotifyUserAuthentication(token);
                _navigationManager.NavigateTo("/");
            }
            else
            {
                faildLogin = "Login failed. No valid token received.";
            }
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            // User not found, redirect to register page
            _navigationManager.NavigateTo("/register");
        }
        else
        {
            faildLogin = "Login failed. Please check your credentials.";
        }
    }

    private void NavigateToRegister()
    {
        _navigationManager.NavigateTo("/register");
    }
}