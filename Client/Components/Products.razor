@page "/products"
@using RealWorldApp.Client.Components
@using RealWorldApp.Shared.Models
@using RealWorldApp.Client.Services
@inject ProductService ProductService
@inject IJSRuntime JSRuntime
@inject BlockUIService BlockUI
@using RealWorldApp.Client.Enums

<style>
    tbody tbody tr:last-child {
        border-bottom: !important;
    }
</style>

@* using DataContainer id to say to Block() methode to block the table till loading all the data *@
<div id="DataContainer" class="card">
    <div class="card-header py-3">
        <div class="card-title"></div>
        <div class="toolbar"> 
            <button class="btn btn-info" @onclick="OnClickSortName">
                <i class="fa-solid fa-sort bg-transparent"></i> Sort names
            </button>
            <button class="btn btn-info" @onclick="ShowCreateProductModal">
                <i class="fa-solid fa-plus bg-transparent"></i> Create new product
            </button>
        </div>
    </div>

    <div class="card-body">
        @if (products == null)
        {
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>
                            Name
                            <i @onclick="OnClickSortStock" class="fa fa-solid @(sortByDescriptionAsc ? "fa-arrow-up" : "fa-arrow-down" )"></i>
                        </th>
                        <th>
                            Price
                            <i @onclick="OnClickSortStock" class="fa fa-solid @(sortByDescriptionAsc ? "fa-arrow-up" : "fa-arrow-down" )"></i>
                        </th>
                        <th>
                            Description
                            <i @onclick="OnClickSortStock" class="fa fa-solid @(sortByDescriptionAsc ? "fa-arrow-up" : "fa-arrow-down" )"></i>
                        </th>
                        <th>
                            Status
                        </th>
                        <th>
                            Stock
                            <i @onclick="OnClickSortStock" class="fa fa-solid @(sortByDescriptionAsc ? "fa-arrow-up" : "fa-arrow-down" )"></i>
                        </th>
                        <th>
                            Edit
                        </th>
                        <th>
                            Delete
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < products.Count; i++)
                    {
                        var product = products[i];
                        bool isLast = i == products.Count - 1;
                        <tr>
                            <td class="@(isLast ? "border-bottom-0" : "")"><a href="@($"/products/{product.Id}")">@product.Name</a></td>
                            <td class="@(isLast ? "border-bottom-0" : "")">@product.Price <span>€</span></td>
                            <td class="@(isLast ? "border-bottom-0" : "")">@product.Description</td>
                            <td class="@(isLast ? "border-bottom-0" : "")">@product.Stock</td>
                            <td class="@(isLast ? "border-bottom-0" : "")">
                                @if (product.Stock >= 5)
                                {
                                    <Badge Text="In Stock" Type="BadgeColor.Success" />
                                }
                                else if (product.Stock >= 2 && product.Stock <= 4)
                                {
                                    <Badge Text="Limited Stock" Type="BadgeColor.Warning" />
                                }
                                else
                                {
                                    <Badge Text="Out of Stock" Type="BadgeColor.Danger" />
                                }
                            </td>
                            <td class="@(isLast ? "border-bottom-0" : "")"><a @onclick="() => EditProduct(product.Id)" class="fa-solid fa-pen text-danger" style="cursor: pointer;"></a></td>
                            <td class="@(isLast ? "border-bottom-0" : "")"><i @onclick="() => DeleteProduct(product.Id)" class="fa-solid fa-trash text-danger" style="cursor: pointer;"></i></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        <div>
            @if (products is not null)
            {
                var matchingProducts = products.Where(p => p.Name == "4K Ultra HD Smart TV");
                if (matchingProducts.Any())
                {
                    <ul>
                        @foreach (var matchingProduct in matchingProducts)
                        {
                            <li>Product found: @matchingProduct.Name</li>
                        }
                    </ul>
                }
            }
            else
            {
                <span>No product with ID 1 found</span>
            }
        </div>
    </div>
</div>
<CreateProduct @ref="createProduct" OnProductCreated="RefreshProducts" />
<EditProduct @ref="editProduct" OnProductUpdated="RefreshProducts" />
@code {
    private List<ProductDto>? products;
    private CreateProduct? createProduct;
    private EditProduct? editProduct;
    private bool sortByNameAsc = true;
    private bool sortByPriceAsc = true;
    private bool sortByDescriptionAsc = true;
    private bool sortByStockAsc = true;

    protected override async Task OnInitializedAsync()
    {
        // Block UI when loading data
        await BlockUI.Block("DataContainer");
        try
        {
            await Task.Delay(2000);
            products = await ProductService.GetProductsAsync();
        }
        finally
        {
            await BlockUI.Release("DataContainer");
        }
    }

    private async Task DeleteProduct(int productId)
    {
        // Confirm deletion with the user
        var confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this product?" });
        if (confirmDelete)
        {
            await BlockUI.Block("DataContainer"); // Block the UI during delete action
            try
            {
                await ProductService.DeleteProductAsync(productId); // Call service to fetch product details
                products = await ProductService.GetProductsAsync(); // Refresh the product list
            }
            finally
            {
                await BlockUI.Release("DataContainer");
            }
        }
    }

    private async Task EditProduct(int productId)
    {
        if (editProduct is not null)
        {
            var product = await ProductService.GetProductAsync(productId); // Call service to fetch product details
        if (product != null)
            {
                editProduct.Show(product);
            }   
        }
    }

    private void ShowCreateProductModal()
    {
        if (createProduct is not null)
        {
            createProduct.ShowModal();
        }
    }

    // private void ShowEditProductModal()
    // {
    //     if (editProduct is not null)
    //     {
    //         editProduct.ShowModal();
    //     }
    // }

    private async Task RefreshProducts()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        products = await ProductService.GetProductsAsync();
    }

    private void OnClickSortName()
    {
        if (products is not null)
        {
            if (sortByNameAsc)
            {
                products = products.OrderBy(p => p.Name).ToList();
            }
            else
            {
                products = products.OrderByDescending(p => p.Name).ToList();
            }
            sortByNameAsc = !sortByNameAsc;
        }
    }

    private void OnClickSortPrice()
    {
        if (products is not null)
        {
            if (sortByPriceAsc)
            {
                products = products.OrderBy(p => p.Price).ToList();
            }
            else
            {
                products = products.OrderByDescending(p => p.Price).ToList();
            }
            sortByPriceAsc = !sortByPriceAsc;
        }
    }

    private void OnClickSortDescription()
    {
        if (products is not null)
        {
            if (sortByDescriptionAsc)
            {
                products = products.OrderBy(p => p.Description).ToList();
            }
            else
            {
                products = products.OrderByDescending(p => p.Description).ToList();
            }
            sortByDescriptionAsc = !sortByDescriptionAsc;
        }
    }

    private void OnClickSortStock()
    {
        if (products is not null)
        {
            if (sortByStockAsc)
            {
                products = products.OrderBy(p => p.Stock).ToList();
            }
            else
            {
                products = products.OrderByDescending(p => p.Stock).ToList();
            }
            sortByStockAsc = !sortByStockAsc;
        }
    }
}
