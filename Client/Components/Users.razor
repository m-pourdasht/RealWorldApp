@using RealWorldApp.Client.Components
@using RealWorldApp.Shared.Dto
@using RealWorldApp.Shared.Models
@using RealWorldApp.Client.Services
@inject ApiService<UserDto> UserService
@inject BlockUIService BlockUI
@implements IDisposable

<div id="DataContainer" class="card">
    <div class="card-header py-3">
        <div class="card-title"></div>
        <div class="toolbar">
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    @selectedRoleName
                </button>
                <ul class="dropdown-menu">
                    <li>
                        <a class="dropdown-item" href="#" @onclick="@(() => SelectRole(null, "All Roles"))">All Roles</a>
                    </li>
                    @foreach (var role in roles)
                    {
                        <li>
                            <a class="dropdown-item" href="#" @onclick="() => SelectRole(role.Id, role.Name)">
                                @role.Name
                            </a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <div class="card-body">
        @if (users == null)
        {
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>
                            User Name
                        </th>
                        <th>
                            Email
                        </th>
                        <th>
                            Role
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in FilteredUsers)
                    {
                        bool isLast = user == FilteredUsers.Last();
                        <tr>
                            <td class="@(isLast ? "border-bottom-0" : "")">@($"{user.Username} { FilteredUsers.Count}") </td>
                            <td class="@(isLast ? "border-bottom-0" : "")">@user.Email</td>
                            <td class="@(isLast ? "border-bottom-0" : "")">@user.Role.Name</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        <div>
        </div>
    </div>
</div>

@code {

    private List<UserDto>? users;
    private List<RoleDto> roles = new();
    private int? selectedRoleId;
    private string selectedRoleName = "All Roles";
    private bool _isDisposed;



    private void SelectRole(int? roleId, string roleName)
    {
        selectedRoleId = roleId;
        selectedRoleName = roleName;
    }

    private List<UserDto> FilteredUsers => 
                                        users == null ? Enumerable.Empty<UserDto>().ToList()
                                        : selectedRoleId.HasValue ? 
                                        users.Where(u => u.Role != null && u.Role.Id == selectedRoleId.Value).ToList()
                                        : users.ToList();

    protected override async Task OnInitializedAsync()
    {
        await BlockUI.Block("DataContainer");

        try
        {
            await Task.Delay(2000);
            var allUsers = await UserService.GetAllAsync();
            users = allUsers
                .Where(u => u.Role != null)
                .OrderBy(u => u.Username)
                .ToList();

            // Populate roles from users (or fetch from API if available)
            roles = users
                .Where(u => u.Role != null)
                .Select(u => u.Role)
                .GroupBy(r => r.Id)
                .Select(g => g.First())
                .OrderBy(r => r.Name)
                .ToList();
        }
        finally
        {
            await BlockUI.Release("DataContainer");
        }
    }

    public void Dispose()
    {
        _isDisposed = true;
    }
}
