@page "/products"
@using RealWorldApp.Shared.Models
@using RealWorldApp.Client.Services
@inject ProductService ProductService
@inject IJSRuntime JSRuntime

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-info" @onclick="OnClickSortName">Sort names</button>
    <table class="table">
        <thead>
            <tr>
                <th>
                    Name
                    <button class="btn btn-icon" @onclick="OnClickSortName">
                        <i class="fa" @(sortByNameAsc ? "fa-arrow-up" : "fa-arrow-down" )></i>
                    </button>
                </th>
                <th>
                    Price
                    <button class="btn btn-icon" @onclick="OnClickSortPrice">
                        <i class="fa" @(sortByPriceAsc ? "fa-arrow-up" : "fa-arrow-down" )></i>
                    </button>
                </th>
                <th>
                    Description
                    <button class="btn btn-icon" @onclick="OnClickSortDescription">
                        <i class="fa" @(sortByDescriptionAsc ? "fa-arrow-up" : "fa-arrow-down" )></i>
                    </button>
                </th>
                <th>
                    Stock
                    <button class="btn btn-icon" @onclick="OnClickSortStock">
                        <i class="fa" @(sortByStockAsc ? "fa-arrow-up" : "fa-arrow-down" )></i>
                    </button>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Price</td>
                    <td>@product.Description</td>
                    <td>@product.Stock</td>
                    <td><button class="btn btn-danger" @onclick="() => DeleteProduct(product.Id)">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Product> products;
    private bool sortByNameAsc = true;
    private bool sortByPriceAsc = true;
    private bool sortByDescriptionAsc = true;
    private bool sortByStockAsc = true;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProductsAsync();
    }

    private async Task DeleteProduct(int productId)
    {
        // Invoke a confirmation dialog using JSRuntime
        var confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this product?" });
        if (confirmDelete)
        {
            await ProductService.DeleteProductAsync(productId); // Call service to delete
            products = await ProductService.GetProductsAsync(); // Refresh the product list
        }
    }

    private void OnClickSortName()
    {
        if (sortByNameAsc)
        {
            products = products.OrderBy(p => p.Name).ToList();
        }
        else
        {
            products = products.OrderByDescending(p => p.Name).ToList();
        }
        sortByNameAsc = !sortByNameAsc;
    }

    private void OnClickSortPrice()
    {
        if (sortByPriceAsc)
        {
            products = products.OrderBy(p => p.Price).ToList();
        }
        else
        {
            products = products.OrderByDescending(p => p.Price).ToList();
        }
        sortByPriceAsc = !sortByPriceAsc;
    }

    private void OnClickSortDescription()
    {
        if (sortByDescriptionAsc)
        {
            products = products.OrderBy(p => p.Description).ToList();
        }
        else
        {
            products = products.OrderByDescending(p => p.Description).ToList();
        }
        sortByDescriptionAsc = !sortByDescriptionAsc;
    }

    private void OnClickSortStock()
    {
        if (sortByStockAsc)
        {
            products = products.OrderBy(p => p.Stock).ToList();
        }
        else
        {
            products = products.OrderByDescending(p => p.Stock).ToList();
        }
        sortByStockAsc = !sortByStockAsc;
    }
}
