@page "/login"
@layout CustomLayout
@using Microsoft.AspNetCore.Components.Authorization
@using RealWorldApp.Shared.Models
@using Blazored.SessionStorage
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService _sessionStorage
@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager _navigationManager

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Username:</label>
        <InputText @bind-Value="loginModel.Username" />
    </div>
    <div>
        <label>Password:</label>
        <InputText class="p-14" @bind-Value="loginModel.Password" type="password" />
    </div>

    <button type="submit">Login</button>
</EditForm>
@if (successLogin != null)
{
    <span class="alert alert-info">@successLogin</span>
}
else if (faildLogin != null)
{
    <span class="alert alert-danger">@faildLogin</span>
}

@code {
    private LoginModel loginModel = new LoginModel();
    private string? successLogin { get; set; }
    private string? faildLogin { get; set; }

    private async Task HandleLogin()
    {
        // Clear previous messages
        successLogin = null;
        faildLogin = null;

        var response = await Http.PostAsJsonAsync("api/login", loginModel);
        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();

            if (!string.IsNullOrEmpty(token) && token.Split('.').Length == 3) // Check if token is valid
            {
                await _sessionStorage.SetItemAsync("authToken", token); // Save token to session storage
                ((CustomAuthStateProvider)_authStateProvider).NotifyUserAuthentication(token);
                _navigationManager.NavigateTo("/");
            }
            else
            {
                faildLogin = "Login failed. No valid token received.";
            }
        }
        else
        {
            faildLogin = "Login failed. Please check your credentials.";
        }
    }
}
